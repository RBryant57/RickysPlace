//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.33440
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------



[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.ServiceContractAttribute(Namespace="http://schemas.local.yellowcaddis.commutetracker/2008/12", ConfigurationName="ICommuteTrackerService")]
public interface ICommuteTrackerService
{
    
    // CODEGEN: Generating message contract since the wrapper name (CommuteEntryRequest) of message CommuteEntryRequest does not match the default value (InsertCommute)
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertCommute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertCommuteResponse")]
    CommuteItemEntryResponse InsertCommute(CommuteEntryRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertCommute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertCommuteResponse")]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertCommuteAsync(CommuteEntryRequest request);
    
    // CODEGEN: Generating message contract since the wrapper name (CommuteEntryRequest) of message CommuteEntryRequest does not match the default value (InsertCommuteLeg)
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertCommuteLeg", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertCommuteLegResponse")]
    CommuteItemEntryResponse InsertCommuteLeg(CommuteEntryRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertCommuteLeg", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertCommuteLegResponse")]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertCommuteLegAsync(CommuteEntryRequest request);
    
    // CODEGEN: Generating message contract since the wrapper name (CommuteEntryRequest) of message CommuteEntryRequest does not match the default value (InsertPassCondition)
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertPassCondition", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertPassConditionResponse")]
    CommuteItemEntryResponse InsertPassCondition(CommuteEntryRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertPassCondition", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertPassConditionResponse")]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertPassConditionAsync(CommuteEntryRequest request);
    
    // CODEGEN: Generating message contract since the wrapper name (CommuteItemEntryRequest) of message CommuteItemEntryRequest does not match the default value (InsertDelayReason)
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertDelayReason", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertDelayReasonResponse")]
    CommuteItemEntryResponse InsertDelayReason(CommuteItemEntryRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertDelayReason", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertDelayReasonResponse")]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertDelayReasonAsync(CommuteItemEntryRequest request);
    
    // CODEGEN: Generating message contract since the wrapper name (CommuteItemEntryRequest) of message CommuteItemEntryRequest does not match the default value (InsertDestination)
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertDestination", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertDestinationResponse")]
    CommuteItemEntryResponse InsertDestination(CommuteItemEntryRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertDestination", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertDestinationResponse")]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertDestinationAsync(CommuteItemEntryRequest request);
    
    // CODEGEN: Generating message contract since the wrapper name (CommuteItemEntryRequest) of message CommuteItemEntryRequest does not match the default value (InsertFareClass)
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertFareClass", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertFareClassResponse")]
    CommuteItemEntryResponse InsertFareClass(CommuteItemEntryRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertFareClass", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertFareClassResponse")]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertFareClassAsync(CommuteItemEntryRequest request);
    
    // CODEGEN: Generating message contract since the wrapper name (CommuteRouteEntryRequest) of message CommuteRouteEntryRequest does not match the default value (InsertRoute)
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertRouteResponse")]
    CommuteItemEntryResponse InsertRoute(CommuteRouteEntryRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertRouteResponse")]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertRouteAsync(CommuteRouteEntryRequest request);
    
    // CODEGEN: Generating message contract since the wrapper name (CommuteItemEntryRequest) of message CommuteItemEntryRequest does not match the default value (InsertRouteType)
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertRouteType", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertRouteTypeResponse")]
    CommuteItemEntryResponse InsertRouteType(CommuteItemEntryRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertRouteType", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/I" +
        "nsertRouteTypeResponse")]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertRouteTypeAsync(CommuteItemEntryRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etDelayReasons", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etDelayReasonsResponse")]
    CommuteItemResponse GetDelayReasons(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etDelayReasons", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etDelayReasonsResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetDelayReasonsAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etDestinations", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etDestinationsResponse")]
    CommuteItemResponse GetDestinations(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etDestinations", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etDestinationsResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetDestinationsAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etFareClasses", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etFareClassesResponse")]
    CommuteItemResponse GetFareClasses(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etFareClasses", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etFareClassesResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetFareClassesAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etRoutes", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etRoutesResponse")]
    CommuteItemResponse GetRoutes(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etRoutes", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etRoutesResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetRoutesAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etRouteTypes", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etRouteTypesResponse")]
    CommuteItemResponse GetRouteTypes(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etRouteTypes", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etRouteTypesResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetRouteTypesAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etCommutes", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etCommutesResponse")]
    CommuteItemResponse GetCommutes(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etCommutes", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etCommutesResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetCommutesAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etPassCondition", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etPassConditionResponse")]
    CommuteItemResponse GetPassCondition(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etPassCondition", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etPassConditionResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetPassConditionAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutes", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesResponse")]
    CommuteItemResponse GetAverageCommutes(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutes", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDestination", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDestinationResponse")]
    CommuteItemResponse GetAverageCommutesByDestination(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDestination", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDestinationResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDestinationAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDestinationForRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDestinationForRouteResponse")]
    CommuteItemResponse GetAverageCommutesByDestinationForRoute(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDestinationForRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDestinationForRouteResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDestinationForRouteAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayByDestination", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayByDestinationResponse")]
    CommuteItemResponse GetAverageCommutesByDayByDestination(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayByDestination", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayByDestinationResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDayByDestinationAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayByDestinationForRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayByDestinationForRouteResponse")]
    CommuteItemResponse GetAverageCommutesByDayByDestinationForRoute(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayByDestinationForRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayByDestinationForRouteResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDayByDestinationForRouteAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayForRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayForRouteResponse")]
    CommuteItemResponse GetAverageCommutesByDayForRoute(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayForRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayForRouteResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDayForRouteAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthByDestination", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthByDestinationResponse")]
    CommuteItemResponse GetAverageCommutesByMonthByDestination(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthByDestination", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthByDestinationResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByMonthByDestinationAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthByDestinationForRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthByDestinationForRouteResponse")]
    CommuteItemResponse GetAverageCommutesByMonthByDestinationForRoute(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthByDestinationForRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthByDestinationForRouteResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByMonthByDestinationForRouteAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthForRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthForRouteResponse")]
    CommuteItemResponse GetAverageCommutesByMonthForRoute(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthForRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthForRouteResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByMonthForRouteAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etDepth", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etDepthResponse")]
    CommuteItemResponse GetDepth(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etDepth", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etDepthResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetDepthAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonth", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthResponse")]
    CommuteItemResponse GetAverageCommutesByMonth(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonth", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByMonthAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDay", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayResponse")]
    CommuteItemResponse GetAverageCommutesByDay(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDay", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDayAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayByRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayByRouteResponse")]
    CommuteItemResponse GetAverageCommutesByDayByRoute(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayByRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByDayByRouteResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDayByRouteAsync(CommuteItemRequest request);
    
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthByRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthByRouteResponse")]
    CommuteItemResponse GetAverageCommutesByMonthByRoute(CommuteItemRequest request);
    
    // CODEGEN: Generating message contract since the operation has multiple return values.
    [System.ServiceModel.OperationContractAttribute(Action="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthByRoute", ReplyAction="http://schemas.local.yellowcaddis.commutetracker/2008/12/ICommuteTrackerService/G" +
        "etAverageCommutesByMonthByRouteResponse")]
    System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByMonthByRouteAsync(CommuteItemRequest request);
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="CommuteEntryRequest", WrapperNamespace="http://schemas.local.yellowcaddis.commutetracker/2008/12", IsWrapped=true)]
public partial class CommuteEntryRequest
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=0)]
    public int Commute;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=1)]
    public int Delay;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=2)]
    public int DelaySeconds;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=3)]
    public int Destination;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=4)]
    public System.DateTime EndTime;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=5)]
    public int FareClass;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=6)]
    public string Notes;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=7)]
    public int Route;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=8)]
    public System.DateTime StartTime;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=9)]
    public int UsualMinutes;
    
    public CommuteEntryRequest()
    {
    }
    
    public CommuteEntryRequest(int Commute, int Delay, int DelaySeconds, int Destination, System.DateTime EndTime, int FareClass, string Notes, int Route, System.DateTime StartTime, int UsualMinutes)
    {
        this.Commute = Commute;
        this.Delay = Delay;
        this.DelaySeconds = DelaySeconds;
        this.Destination = Destination;
        this.EndTime = EndTime;
        this.FareClass = FareClass;
        this.Notes = Notes;
        this.Route = Route;
        this.StartTime = StartTime;
        this.UsualMinutes = UsualMinutes;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="CommuteItemEntryResponse", WrapperNamespace="http://schemas.local.yellowcaddis.commutetracker/2008/12", IsWrapped=true)]
public partial class CommuteItemEntryResponse
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=0)]
    public int Id;
    
    public CommuteItemEntryResponse()
    {
    }
    
    public CommuteItemEntryResponse(int Id)
    {
        this.Id = Id;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="CommuteItemEntryRequest", WrapperNamespace="http://schemas.local.yellowcaddis.commutetracker/2008/12", IsWrapped=true)]
public partial class CommuteItemEntryRequest
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=0)]
    public string Name;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=1)]
    public string Notes;
    
    public CommuteItemEntryRequest()
    {
    }
    
    public CommuteItemEntryRequest(string Name, string Notes)
    {
        this.Name = Name;
        this.Notes = Notes;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
[System.ServiceModel.MessageContractAttribute(WrapperName="CommuteRouteEntryRequest", WrapperNamespace="http://schemas.local.yellowcaddis.commutetracker/2008/12", IsWrapped=true)]
public partial class CommuteRouteEntryRequest
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=0)]
    public int Miles;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=1)]
    public string Name;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=2)]
    public string Notes;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=3)]
    public string Number;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=4)]
    public int Type;
    
    public CommuteRouteEntryRequest()
    {
    }
    
    public CommuteRouteEntryRequest(int Miles, string Name, string Notes, string Number, int Type)
    {
        this.Miles = Miles;
        this.Name = Name;
        this.Notes = Notes;
        this.Number = Number;
        this.Type = Type;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="CommuteItemRequest", WrapperNamespace="http://schemas.local.yellowcaddis.commutetracker/2008/12", IsWrapped=true)]
public partial class CommuteItemRequest
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=0)]
    public System.DateTime CommuteDate;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=1)]
    public int Id;
    
    public CommuteItemRequest()
    {
    }
    
    public CommuteItemRequest(System.DateTime CommuteDate, int Id)
    {
        this.CommuteDate = CommuteDate;
        this.Id = Id;
    }
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
[System.ServiceModel.MessageContractAttribute(WrapperName="CommuteItemResponse", WrapperNamespace="http://schemas.local.yellowcaddis.commutetracker/2008/12", IsWrapped=true)]
public partial class CommuteItemResponse
{
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=0)]
    public System.Collections.Generic.Dictionary<int, string[]> AverageCommutes;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=1)]
    public System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=2)]
    public System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=3)]
    public System.Collections.Generic.Dictionary<int, string> Delays;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=4)]
    public System.Collections.Generic.Dictionary<int, string> Destinations;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=5)]
    public System.Collections.Generic.Dictionary<int, string> FareClasses;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=6)]
    public int Id;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=7)]
    public System.Collections.Generic.Dictionary<int, string> RouteTypes;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2008/12", Order=8)]
    public string XMLData;
    
    [System.ServiceModel.MessageBodyMemberAttribute(Namespace="http://schemas.yellowcaddis.commutetracker/2088/12", Order=9)]
    public System.Collections.Generic.Dictionary<int, string> Routes;
    
    public CommuteItemResponse()
    {
    }
    
    public CommuteItemResponse(System.Collections.Generic.Dictionary<int, string[]> AverageCommutes, System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, System.Collections.Generic.Dictionary<int, string> Delays, System.Collections.Generic.Dictionary<int, string> Destinations, System.Collections.Generic.Dictionary<int, string> FareClasses, int Id, System.Collections.Generic.Dictionary<int, string> RouteTypes, string XMLData, System.Collections.Generic.Dictionary<int, string> Routes)
    {
        this.AverageCommutes = AverageCommutes;
        this.AverageCommutesBy = AverageCommutesBy;
        this.AverageCommutesByTime = AverageCommutesByTime;
        this.Delays = Delays;
        this.Destinations = Destinations;
        this.FareClasses = FareClasses;
        this.Id = Id;
        this.RouteTypes = RouteTypes;
        this.XMLData = XMLData;
        this.Routes = Routes;
    }
}

[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public interface ICommuteTrackerServiceChannel : ICommuteTrackerService, System.ServiceModel.IClientChannel
{
}

[System.Diagnostics.DebuggerStepThroughAttribute()]
[System.CodeDom.Compiler.GeneratedCodeAttribute("System.ServiceModel", "4.0.0.0")]
public partial class CommuteTrackerServiceClient : System.ServiceModel.ClientBase<ICommuteTrackerService>, ICommuteTrackerService
{
    
    public CommuteTrackerServiceClient()
    {
    }
    
    public CommuteTrackerServiceClient(string endpointConfigurationName) : 
            base(endpointConfigurationName)
    {
    }
    
    public CommuteTrackerServiceClient(string endpointConfigurationName, string remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CommuteTrackerServiceClient(string endpointConfigurationName, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(endpointConfigurationName, remoteAddress)
    {
    }
    
    public CommuteTrackerServiceClient(System.ServiceModel.Channels.Binding binding, System.ServiceModel.EndpointAddress remoteAddress) : 
            base(binding, remoteAddress)
    {
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemEntryResponse ICommuteTrackerService.InsertCommute(CommuteEntryRequest request)
    {
        return base.Channel.InsertCommute(request);
    }
    
    public int InsertCommute(int Commute, int Delay, int DelaySeconds, int Destination, System.DateTime EndTime, int FareClass, string Notes, int Route, System.DateTime StartTime, int UsualMinutes)
    {
        CommuteEntryRequest inValue = new CommuteEntryRequest();
        inValue.Commute = Commute;
        inValue.Delay = Delay;
        inValue.DelaySeconds = DelaySeconds;
        inValue.Destination = Destination;
        inValue.EndTime = EndTime;
        inValue.FareClass = FareClass;
        inValue.Notes = Notes;
        inValue.Route = Route;
        inValue.StartTime = StartTime;
        inValue.UsualMinutes = UsualMinutes;
        CommuteItemEntryResponse retVal = ((ICommuteTrackerService)(this)).InsertCommute(inValue);
        return retVal.Id;
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> ICommuteTrackerService.InsertCommuteAsync(CommuteEntryRequest request)
    {
        return base.Channel.InsertCommuteAsync(request);
    }
    
    public System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertCommuteAsync(int Commute, int Delay, int DelaySeconds, int Destination, System.DateTime EndTime, int FareClass, string Notes, int Route, System.DateTime StartTime, int UsualMinutes)
    {
        CommuteEntryRequest inValue = new CommuteEntryRequest();
        inValue.Commute = Commute;
        inValue.Delay = Delay;
        inValue.DelaySeconds = DelaySeconds;
        inValue.Destination = Destination;
        inValue.EndTime = EndTime;
        inValue.FareClass = FareClass;
        inValue.Notes = Notes;
        inValue.Route = Route;
        inValue.StartTime = StartTime;
        inValue.UsualMinutes = UsualMinutes;
        return ((ICommuteTrackerService)(this)).InsertCommuteAsync(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemEntryResponse ICommuteTrackerService.InsertCommuteLeg(CommuteEntryRequest request)
    {
        return base.Channel.InsertCommuteLeg(request);
    }
    
    public int InsertCommuteLeg(int Commute, int Delay, int DelaySeconds, int Destination, System.DateTime EndTime, int FareClass, string Notes, int Route, System.DateTime StartTime, int UsualMinutes)
    {
        CommuteEntryRequest inValue = new CommuteEntryRequest();
        inValue.Commute = Commute;
        inValue.Delay = Delay;
        inValue.DelaySeconds = DelaySeconds;
        inValue.Destination = Destination;
        inValue.EndTime = EndTime;
        inValue.FareClass = FareClass;
        inValue.Notes = Notes;
        inValue.Route = Route;
        inValue.StartTime = StartTime;
        inValue.UsualMinutes = UsualMinutes;
        CommuteItemEntryResponse retVal = ((ICommuteTrackerService)(this)).InsertCommuteLeg(inValue);
        return retVal.Id;
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> ICommuteTrackerService.InsertCommuteLegAsync(CommuteEntryRequest request)
    {
        return base.Channel.InsertCommuteLegAsync(request);
    }
    
    public System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertCommuteLegAsync(int Commute, int Delay, int DelaySeconds, int Destination, System.DateTime EndTime, int FareClass, string Notes, int Route, System.DateTime StartTime, int UsualMinutes)
    {
        CommuteEntryRequest inValue = new CommuteEntryRequest();
        inValue.Commute = Commute;
        inValue.Delay = Delay;
        inValue.DelaySeconds = DelaySeconds;
        inValue.Destination = Destination;
        inValue.EndTime = EndTime;
        inValue.FareClass = FareClass;
        inValue.Notes = Notes;
        inValue.Route = Route;
        inValue.StartTime = StartTime;
        inValue.UsualMinutes = UsualMinutes;
        return ((ICommuteTrackerService)(this)).InsertCommuteLegAsync(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemEntryResponse ICommuteTrackerService.InsertPassCondition(CommuteEntryRequest request)
    {
        return base.Channel.InsertPassCondition(request);
    }
    
    public int InsertPassCondition(int Commute, int Delay, int DelaySeconds, int Destination, System.DateTime EndTime, int FareClass, string Notes, int Route, System.DateTime StartTime, int UsualMinutes)
    {
        CommuteEntryRequest inValue = new CommuteEntryRequest();
        inValue.Commute = Commute;
        inValue.Delay = Delay;
        inValue.DelaySeconds = DelaySeconds;
        inValue.Destination = Destination;
        inValue.EndTime = EndTime;
        inValue.FareClass = FareClass;
        inValue.Notes = Notes;
        inValue.Route = Route;
        inValue.StartTime = StartTime;
        inValue.UsualMinutes = UsualMinutes;
        CommuteItemEntryResponse retVal = ((ICommuteTrackerService)(this)).InsertPassCondition(inValue);
        return retVal.Id;
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> ICommuteTrackerService.InsertPassConditionAsync(CommuteEntryRequest request)
    {
        return base.Channel.InsertPassConditionAsync(request);
    }
    
    public System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertPassConditionAsync(int Commute, int Delay, int DelaySeconds, int Destination, System.DateTime EndTime, int FareClass, string Notes, int Route, System.DateTime StartTime, int UsualMinutes)
    {
        CommuteEntryRequest inValue = new CommuteEntryRequest();
        inValue.Commute = Commute;
        inValue.Delay = Delay;
        inValue.DelaySeconds = DelaySeconds;
        inValue.Destination = Destination;
        inValue.EndTime = EndTime;
        inValue.FareClass = FareClass;
        inValue.Notes = Notes;
        inValue.Route = Route;
        inValue.StartTime = StartTime;
        inValue.UsualMinutes = UsualMinutes;
        return ((ICommuteTrackerService)(this)).InsertPassConditionAsync(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemEntryResponse ICommuteTrackerService.InsertDelayReason(CommuteItemEntryRequest request)
    {
        return base.Channel.InsertDelayReason(request);
    }
    
    public int InsertDelayReason(string Name, string Notes)
    {
        CommuteItemEntryRequest inValue = new CommuteItemEntryRequest();
        inValue.Name = Name;
        inValue.Notes = Notes;
        CommuteItemEntryResponse retVal = ((ICommuteTrackerService)(this)).InsertDelayReason(inValue);
        return retVal.Id;
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> ICommuteTrackerService.InsertDelayReasonAsync(CommuteItemEntryRequest request)
    {
        return base.Channel.InsertDelayReasonAsync(request);
    }
    
    public System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertDelayReasonAsync(string Name, string Notes)
    {
        CommuteItemEntryRequest inValue = new CommuteItemEntryRequest();
        inValue.Name = Name;
        inValue.Notes = Notes;
        return ((ICommuteTrackerService)(this)).InsertDelayReasonAsync(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemEntryResponse ICommuteTrackerService.InsertDestination(CommuteItemEntryRequest request)
    {
        return base.Channel.InsertDestination(request);
    }
    
    public int InsertDestination(string Name, string Notes)
    {
        CommuteItemEntryRequest inValue = new CommuteItemEntryRequest();
        inValue.Name = Name;
        inValue.Notes = Notes;
        CommuteItemEntryResponse retVal = ((ICommuteTrackerService)(this)).InsertDestination(inValue);
        return retVal.Id;
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> ICommuteTrackerService.InsertDestinationAsync(CommuteItemEntryRequest request)
    {
        return base.Channel.InsertDestinationAsync(request);
    }
    
    public System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertDestinationAsync(string Name, string Notes)
    {
        CommuteItemEntryRequest inValue = new CommuteItemEntryRequest();
        inValue.Name = Name;
        inValue.Notes = Notes;
        return ((ICommuteTrackerService)(this)).InsertDestinationAsync(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemEntryResponse ICommuteTrackerService.InsertFareClass(CommuteItemEntryRequest request)
    {
        return base.Channel.InsertFareClass(request);
    }
    
    public int InsertFareClass(string Name, string Notes)
    {
        CommuteItemEntryRequest inValue = new CommuteItemEntryRequest();
        inValue.Name = Name;
        inValue.Notes = Notes;
        CommuteItemEntryResponse retVal = ((ICommuteTrackerService)(this)).InsertFareClass(inValue);
        return retVal.Id;
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> ICommuteTrackerService.InsertFareClassAsync(CommuteItemEntryRequest request)
    {
        return base.Channel.InsertFareClassAsync(request);
    }
    
    public System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertFareClassAsync(string Name, string Notes)
    {
        CommuteItemEntryRequest inValue = new CommuteItemEntryRequest();
        inValue.Name = Name;
        inValue.Notes = Notes;
        return ((ICommuteTrackerService)(this)).InsertFareClassAsync(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemEntryResponse ICommuteTrackerService.InsertRoute(CommuteRouteEntryRequest request)
    {
        return base.Channel.InsertRoute(request);
    }
    
    public int InsertRoute(int Miles, string Name, string Notes, string Number, int Type)
    {
        CommuteRouteEntryRequest inValue = new CommuteRouteEntryRequest();
        inValue.Miles = Miles;
        inValue.Name = Name;
        inValue.Notes = Notes;
        inValue.Number = Number;
        inValue.Type = Type;
        CommuteItemEntryResponse retVal = ((ICommuteTrackerService)(this)).InsertRoute(inValue);
        return retVal.Id;
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> ICommuteTrackerService.InsertRouteAsync(CommuteRouteEntryRequest request)
    {
        return base.Channel.InsertRouteAsync(request);
    }
    
    public System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertRouteAsync(int Miles, string Name, string Notes, string Number, int Type)
    {
        CommuteRouteEntryRequest inValue = new CommuteRouteEntryRequest();
        inValue.Miles = Miles;
        inValue.Name = Name;
        inValue.Notes = Notes;
        inValue.Number = Number;
        inValue.Type = Type;
        return ((ICommuteTrackerService)(this)).InsertRouteAsync(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemEntryResponse ICommuteTrackerService.InsertRouteType(CommuteItemEntryRequest request)
    {
        return base.Channel.InsertRouteType(request);
    }
    
    public int InsertRouteType(string Name, string Notes)
    {
        CommuteItemEntryRequest inValue = new CommuteItemEntryRequest();
        inValue.Name = Name;
        inValue.Notes = Notes;
        CommuteItemEntryResponse retVal = ((ICommuteTrackerService)(this)).InsertRouteType(inValue);
        return retVal.Id;
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    System.Threading.Tasks.Task<CommuteItemEntryResponse> ICommuteTrackerService.InsertRouteTypeAsync(CommuteItemEntryRequest request)
    {
        return base.Channel.InsertRouteTypeAsync(request);
    }
    
    public System.Threading.Tasks.Task<CommuteItemEntryResponse> InsertRouteTypeAsync(string Name, string Notes)
    {
        CommuteItemEntryRequest inValue = new CommuteItemEntryRequest();
        inValue.Name = Name;
        inValue.Notes = Notes;
        return ((ICommuteTrackerService)(this)).InsertRouteTypeAsync(inValue);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetDelayReasons(CommuteItemRequest request)
    {
        return base.Channel.GetDelayReasons(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetDelayReasons(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetDelayReasons(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetDelayReasonsAsync(CommuteItemRequest request)
    {
        return base.Channel.GetDelayReasonsAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetDestinations(CommuteItemRequest request)
    {
        return base.Channel.GetDestinations(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetDestinations(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetDestinations(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetDestinationsAsync(CommuteItemRequest request)
    {
        return base.Channel.GetDestinationsAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetFareClasses(CommuteItemRequest request)
    {
        return base.Channel.GetFareClasses(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetFareClasses(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetFareClasses(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetFareClassesAsync(CommuteItemRequest request)
    {
        return base.Channel.GetFareClassesAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetRoutes(CommuteItemRequest request)
    {
        return base.Channel.GetRoutes(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetRoutes(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetRoutes(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetRoutesAsync(CommuteItemRequest request)
    {
        return base.Channel.GetRoutesAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetRouteTypes(CommuteItemRequest request)
    {
        return base.Channel.GetRouteTypes(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetRouteTypes(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetRouteTypes(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetRouteTypesAsync(CommuteItemRequest request)
    {
        return base.Channel.GetRouteTypesAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetCommutes(CommuteItemRequest request)
    {
        return base.Channel.GetCommutes(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetCommutes(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetCommutes(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetCommutesAsync(CommuteItemRequest request)
    {
        return base.Channel.GetCommutesAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetPassCondition(CommuteItemRequest request)
    {
        return base.Channel.GetPassCondition(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetPassCondition(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetPassCondition(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetPassConditionAsync(CommuteItemRequest request)
    {
        return base.Channel.GetPassConditionAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutes(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutes(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutes(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutes(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutesByDestination(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDestination(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutesByDestination(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutesByDestination(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDestinationAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDestinationAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutesByDestinationForRoute(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDestinationForRoute(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutesByDestinationForRoute(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutesByDestinationForRoute(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDestinationForRouteAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDestinationForRouteAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutesByDayByDestination(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDayByDestination(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutesByDayByDestination(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutesByDayByDestination(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDayByDestinationAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDayByDestinationAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutesByDayByDestinationForRoute(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDayByDestinationForRoute(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutesByDayByDestinationForRoute(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutesByDayByDestinationForRoute(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDayByDestinationForRouteAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDayByDestinationForRouteAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutesByDayForRoute(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDayForRoute(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutesByDayForRoute(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutesByDayForRoute(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDayForRouteAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDayForRouteAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutesByMonthByDestination(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByMonthByDestination(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutesByMonthByDestination(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutesByMonthByDestination(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByMonthByDestinationAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByMonthByDestinationAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutesByMonthByDestinationForRoute(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByMonthByDestinationForRoute(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutesByMonthByDestinationForRoute(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutesByMonthByDestinationForRoute(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByMonthByDestinationForRouteAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByMonthByDestinationForRouteAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutesByMonthForRoute(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByMonthForRoute(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutesByMonthForRoute(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutesByMonthForRoute(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByMonthForRouteAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByMonthForRouteAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetDepth(CommuteItemRequest request)
    {
        return base.Channel.GetDepth(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetDepth(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetDepth(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetDepthAsync(CommuteItemRequest request)
    {
        return base.Channel.GetDepthAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutesByMonth(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByMonth(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutesByMonth(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutesByMonth(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByMonthAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByMonthAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutesByDay(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDay(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutesByDay(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutesByDay(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDayAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDayAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutesByDayByRoute(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDayByRoute(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutesByDayByRoute(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutesByDayByRoute(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByDayByRouteAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByDayByRouteAsync(request);
    }
    
    [System.ComponentModel.EditorBrowsableAttribute(System.ComponentModel.EditorBrowsableState.Advanced)]
    CommuteItemResponse ICommuteTrackerService.GetAverageCommutesByMonthByRoute(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByMonthByRoute(request);
    }
    
    public System.Collections.Generic.Dictionary<int, string[]> GetAverageCommutesByMonthByRoute(System.DateTime CommuteDate, ref int Id, out System.Collections.Generic.Dictionary<int, string[][]> AverageCommutesBy, out System.Collections.Generic.Dictionary<string, string[]> AverageCommutesByTime, out System.Collections.Generic.Dictionary<int, string> Delays, out System.Collections.Generic.Dictionary<int, string> Destinations, out System.Collections.Generic.Dictionary<int, string> FareClasses, out System.Collections.Generic.Dictionary<int, string> RouteTypes, out string XMLData, out System.Collections.Generic.Dictionary<int, string> Routes)
    {
        CommuteItemRequest inValue = new CommuteItemRequest();
        inValue.CommuteDate = CommuteDate;
        inValue.Id = Id;
        CommuteItemResponse retVal = ((ICommuteTrackerService)(this)).GetAverageCommutesByMonthByRoute(inValue);
        AverageCommutesBy = retVal.AverageCommutesBy;
        AverageCommutesByTime = retVal.AverageCommutesByTime;
        Delays = retVal.Delays;
        Destinations = retVal.Destinations;
        FareClasses = retVal.FareClasses;
        Id = retVal.Id;
        RouteTypes = retVal.RouteTypes;
        XMLData = retVal.XMLData;
        Routes = retVal.Routes;
        return retVal.AverageCommutes;
    }
    
    public System.Threading.Tasks.Task<CommuteItemResponse> GetAverageCommutesByMonthByRouteAsync(CommuteItemRequest request)
    {
        return base.Channel.GetAverageCommutesByMonthByRouteAsync(request);
    }
}
